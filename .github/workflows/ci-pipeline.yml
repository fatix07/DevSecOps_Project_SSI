name: DevSecOps CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  pull-and-run:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Pull Docker Image
      - name: Pull Docker Image
        run: docker pull bkimminich/juice-shop

      # Step 3: Run Docker Image
      - name: Run Docker Image
        run: docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop

  sast-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Run SAST (e.g., CodeQL)
      - name: Set up CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: security

  sca-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Run SCA (e.g., Trivy)
      - name: Scan Dependencies with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bkimminich/juice-shop

  dast-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Deploy Application for Testing
      - name: Pull and Run Juice Shop
        run: |
          docker pull bkimminich/juice-shop
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop

      # Step 2: Run DAST (e.g., OWASP ZAP)
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run -t owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:3000 -r report.html

      # Step 3: Upload Scan Report
      - name: Upload DAST Report
        uses: actions/upload-artifact@v3
        with:
          name: owasp-zap-report
          path: report.html
